/*
 * This program is written by Shaqueir Tardif
 * You may use this program as open-sourced material
 * to aid in the development of your own program.
 * This program features patterns generated by user input.
 *
 * Feel free to make modifications and use the program however you'd like.

 !!!!!************************************************************************!!!!!
 RULES:

 The objective of this project is to form patters using stars and printf() statements.

 Rules: No individual printf() statement can be reused within the program. Meaning, there can't be two locations
 in the same pattern where printf("*"); is located.

 You can only use the printf() statement once in each segment.
 !!!!!***************************************************************************!!!!

 *
 * Author: Shaqueir Tardif
 * Date: 5/28/2019
 * IDE: Visual Studio Community 2017
 * Project Title: Patterns.cpp*/

#define _CRT_SECURE_NO_WARNINGS

#include<stdio.h>
#include<math.h>
#include "pch.h"
#include <iostream>

void main(void)
{
	int n, m;

	/******************************************************************************
	
	4 x 10 box
	
	*/
	printf("---------------------------Pattern 1\n");
	n = 0;
	m = 0;
	while (m < 4) //4 rows
	{
		while (n < 10) //10 stars in each row
		{
			printf("*");
			n = n + 1;
		}
		printf("\n");
		n = 0; //reset n
		m = m + 1; //change rows
	}


	/******************************************************************************

	Pyramid starting from Left Side

	1,2,3,4,5,6 pattern 

	*/

	printf("---------------------------Pattern 2\n");

	int x;

	x = 0;
	n = 0;

	while (x < 6)
	{
		n = 0;
		while (n <= x)
		{
			printf("*"); //print a star for each row
			n++; //increase the number of stars printed in each row
		}
		printf("\n");
		x++;
	}


	/******************************************************************************

	Upside down Pyramid from Left Side

	9, 7, 5, 3, 1 (subtracts by two in each row)

	*/

	printf("---------------------------Pattern 3\n");

	x = 0;
	while (x < 9)
	{
		n = 9; //starting stars
		while (n > x)
		{
			printf("*");
			n--; //keep decreasing until n = 0
		}
		printf("\n");
		x = x + 2; //gives the -2 result in the stars since n is affected by the value of x
	}


	/******************************************************************************

	Upside down pyramid from right side

	5, 4, 3, 2, 1

	*/

	printf("---------------------------Pattern 4\n");

	int w;
	n = 0;

	while (n < 5) //# of rows
	{
		x = 1;
		while (x <= n)
		{
			printf(" "); //doesn't print during first row since n = 0
			x++;
		}
		w = 5 - n; //assigns number of stars to be printed
		while (w > 0)// prints stars per row
		{
			printf("*");
			w--;//decrease star count each row
		}
		printf("\n");
		n++;
	}


	/******************************************************************************

	Pyramid starting from right side
	1, 3, 5, 7 (increases by 2)

	*/

	printf("---------------------------Pattern 5\n");
	x = 1;
	while (x <= 4) //4 rows
	{
		n = 8;
		while ((x * 2) < n) //create the spaces in each row. 1st row needs the most spaces
		{
			printf(" "); //print the spaces
			n--; 
		}
		w = x * 2 - 1; //assigns number of stars to be printed
		while (w > 0) //prints stars per row
		{
			printf("*");
			w--;
		}
		printf("\n");
		x++;
	}


	/******************************************************************************

	Pyramid starting from center
	1, 3, 5, 7, 9 (increases by 2)

	*/

	printf("---------------------------Pattern 6\n");

	x = 0;

	while (x < 5) //# of rows
	{
		n = 1;

		while (n < (5 - x)) //loop to print spaces
		{
			printf(" ");
			n++;
		}

		w = x * 2;
		while (w >= 0) //loop to print stars
		{
			printf("*");
			w--;
		}
		printf("\n");
		x++;
	}


	/******************************************************************************

	2 Pyramids meeting in the middle sharing one point
	11, 9, 7, 5, 3, 1, 3, 5, 7, 9, 11

	*/

	printf("---------------------------Pattern 7\n");

	int t, s, r;
	for (r = -5; r <= +5; r++) //used to set number of rows and formulate how many stars in each row
	{
		for (s = 0; s < (5 - abs(r)); s++) //used abs to print both sides accurately; prints spaces 
		{
			printf(" ");
		}
		for (t = 0; t < 2 * (abs(r)) + 1; t++) //prints stars; uses abs for symmetry
		{
			printf("*");
		}
		printf("\n");
	}

	/******************************************************************************

	Spontaneous. Somewhat hardcoded through the positioning of the array. Simply prints where it is positioned in the array.

	*/
	printf("---------------------------Pattern 8\n");
	int G[] = { 7,11,13,14,13,11,7,4,1,0,1,4,7 }; //array to help set the positioning of the stars

	int j, i = 0;
	while (i < 13) //# of rows
	{
		j = G[i];
		while (j > 0) //loop for spaces
		{
			printf(" ");
			j--;
		}
		printf("*\n"); //print a new line immediately; will alter shape incorrectly if not done similarly
		i++;
	}

}
